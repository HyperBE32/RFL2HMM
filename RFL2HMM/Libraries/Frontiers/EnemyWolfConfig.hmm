Library "EnemyWolfConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct RingParameter
    {
        [FieldOffset(0x00)] public float suckedTime;
        [FieldOffset(0x04)] public float launchAngle;
        [FieldOffset(0x08)] public float launchMaxSpeed;
        [FieldOffset(0x0C)] public float launchMinSpeed;
        [FieldOffset(0x10)] public float randomRangeMin;
        [FieldOffset(0x14)] public float randomRangeMax;
        [FieldOffset(0x18)] public float lifeTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct WolfMovementParam
    {
        [FieldOffset(0x00)] public float rotateSpeedMin;
        [FieldOffset(0x04)] public float rotateSpeedMax;
        [FieldOffset(0x08)] public float rotateSpeedMaxSpeedMin;
        [FieldOffset(0x0C)] public float rotateSpeedMinSpeedMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct WolfEyesightParam
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float angle;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum WolfVolumeShape : sbyte
    {
        SPHERE = 0,
        BOX = 1,
        CYLINDER = 2,
        CAPSULE = 3,
        NUM = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct WolfVolumeInfo
    {
        [FieldOffset(0x00)] public Vector3 volumeSize;
        [FieldOffset(0x10)] public Vector3 volumeOffset;
        [FieldOffset(0x20)] public Vector3 volumeRotation;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct WolfMappingPairInfo
    {
        [FieldOffset(0x00)] public UnmanagedString tagName;
        [FieldOffset(0x10)] public sbyte pieceNum;
        [FieldOffset(0x14)] public float pieceFuncFactor;
        [FieldOffset(0x18)] public WolfVolumeShape volumeShape;
        [FieldOffset(0x20)] public UnmanagedString wolfNodeName;
        [FieldOffset(0x30)] public WolfVolumeInfo wolfVolume;
        [FieldOffset(0x60)] public bool effectActive;
        [FieldOffset(0x61)] public bool debugDraw;
        [FieldOffset(0x62)] public bool debugDrawVolumeAxis;
        [FieldOffset(0x63)] public bool debugDrawAxis;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE60)]
    public struct EnemyWolfCommonParam
    {
        [FieldOffset(0x00)] public RingParameter ringParam;
        [FieldOffset(0x1C)] public WolfMovementParam movement;
        [FieldOffset(0x2C)] public WolfEyesightParam eyesight;
        [FieldOffset(0x34)] public float killWaitTime;
        [FieldOffset(0x38)] public float blockColliderRadius;
        [FieldOffset(0x3C)] public float blockColliderHeight;
        [FieldOffset(0x40)] public float damageColliderRadius;
        [FieldOffset(0x44)] public float damageColliderHeight;
        [FieldOffset(0x48)] public float eyesightDistance;
        [FieldOffset(0x50)] public Vector3 cursorOffset;
        [FieldOffset(0x60)] public unsafe fixed byte /* WolfMappingPairInfo[32] */ _mappingPairInfo[3584];

        public unsafe WolfMappingPairInfo* mappingPairInfo
        {
            get
            {
                fixed (byte* p_mappingPairInfo = _mappingPairInfo)
                    return (WolfMappingPairInfo*)p_mappingPairInfo;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct EnemyWolfCommonLevelParam
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public float attackRate;
        [FieldOffset(0x08)] public ushort expItemNum;
        [FieldOffset(0x0A)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct EnemyWolfLevelParam
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public EnemyWolfCommonLevelParam common;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct EnemyWolfLevelBand
    {
        [FieldOffset(0x00)] public int level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xED0)]
    public struct EnemyWolfConfig
    {
        [FieldOffset(0x00)] public EnemyWolfCommonParam commonParam;
        [FieldOffset(0xE60)] public unsafe fixed byte /* EnemyWolfLevelParam[5] */ _levelParams[80];

        public unsafe EnemyWolfLevelParam* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (EnemyWolfLevelParam*)p_levelParams;
            }
        }

        [FieldOffset(0xEB0)] public unsafe fixed byte /* EnemyWolfLevelBand[5] */ _levelBand[20];

        public unsafe EnemyWolfLevelBand* levelBand
        {
            get
            {
                fixed (byte* p_levelBand = _levelBand)
                    return (EnemyWolfLevelBand*)p_levelBand;
            }
        }
    }

}