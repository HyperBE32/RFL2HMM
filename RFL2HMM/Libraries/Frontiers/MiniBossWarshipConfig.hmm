Library "MiniBossWarshipConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossCommonConfig
    {
        [FieldOffset(0x00)] public float scoutDistance;
        [FieldOffset(0x04)] public float scoutDistanceOutside;
        [FieldOffset(0x08)] public float zoomDistance;
        [FieldOffset(0x10)] public Vector3 zoomOffset;
        [FieldOffset(0x20)] public Vector3 zoomAngle;
        [FieldOffset(0x30)] public float zoomFov;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct MiniBossWarshipSpeedParam
    {
        [FieldOffset(0x00)] public float highSpeed;
        [FieldOffset(0x04)] public float lowSpeed;
        [FieldOffset(0x08)] public float changeLowSpeedDistance;
        [FieldOffset(0x0C)] public float disableDistanceMaxSpeed;
        [FieldOffset(0x10)] public float relativeSpeedDisableDistance;
        [FieldOffset(0x14)] public float speedOnJump;
        [FieldOffset(0x18)] public float speedDownOnJumpDistance;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct MiniBossWarshipAccelSpeed
    {
        [FieldOffset(0x00)] public float min;
        [FieldOffset(0x04)] public float max;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossWarshipWarpCameraParam
    {
        [FieldOffset(0x00)] public float zoomDistance;
        [FieldOffset(0x10)] public Vector3 zoomOffset;
        [FieldOffset(0x20)] public Vector3 zoomAngle;
        [FieldOffset(0x30)] public float zoomFov;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossWarshipEscapeCameraParam
    {
        [FieldOffset(0x00)] public float fovy;
        [FieldOffset(0x04)] public float zRot;
        [FieldOffset(0x08)] public float distance;
        [FieldOffset(0x0C)] public float pathOffset;
        [FieldOffset(0x10)] public bool usePathVerticalComponent;
        [FieldOffset(0x11)] public bool usePathNormal;
        [FieldOffset(0x14)] public float angleSensitivity;
        [FieldOffset(0x18)] public float angleSensitivityBoost;
        [FieldOffset(0x1C)] public float azimuthOffsetDeg;
        [FieldOffset(0x20)] public float elevationOffsetDeg;
        [FieldOffset(0x24)] public float gravityOffset;
        [FieldOffset(0x30)] public Vector3 playerOffset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct MiniBossWarshipObjectParam
    {
        [FieldOffset(0x00)] public float dashRingAppearDistance;
        [FieldOffset(0x04)] public float dashRingDisappearDistance;
        [FieldOffset(0x08)] public float birdAppearDistance;
        [FieldOffset(0x0C)] public float birdDisappearDistance;
        [FieldOffset(0x10)] public float bulletAppearDistance;
        [FieldOffset(0x14)] public float bulletDisappearDistance;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct WarshipNearLaunchParam
    {
        [FieldOffset(0x00)] public float outStrength;
        [FieldOffset(0x04)] public float inStrength;
        [FieldOffset(0x08)] public float outElev;
        [FieldOffset(0x0C)] public float inElev;
        [FieldOffset(0x10)] public float speedMin;
        [FieldOffset(0x14)] public float speedMax;
        [FieldOffset(0x18)] public float speedMinLength;
        [FieldOffset(0x1C)] public float speedMaxLength;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x130)]
    public struct MiniBossWarshipCommonParam
    {
        [FieldOffset(0x00)] public MiniBossCommonConfig commonConfig;
        [FieldOffset(0x40)] public MiniBossWarshipSpeedParam speedParam;
        [FieldOffset(0x5C)] public MiniBossWarshipAccelSpeed normalSpeedParam;
        [FieldOffset(0x64)] public MiniBossWarshipAccelSpeed boostSpeedParam;
        [FieldOffset(0x70)] public MiniBossWarshipWarpCameraParam warpCameraParam;
        [FieldOffset(0xB0)] public MiniBossWarshipEscapeCameraParam escapeCameraParam;
        [FieldOffset(0xF0)] public MiniBossWarshipObjectParam objectParam;
        [FieldOffset(0x108)] public WarshipNearLaunchParam launchParam;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x34)]
    public struct MiniBossLevelCommonConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x10)] public float stunDecreaseStartTime;
        [FieldOffset(0x14)] public float stunDecreaseSpeed;
        [FieldOffset(0x18)] public unsafe fixed float maxStaggerPoint[3];
        [FieldOffset(0x24)] public float staggerDecreaseStartTime;
        [FieldOffset(0x28)] public float staggerDecreaseSpeed;
        [FieldOffset(0x2C)] public float attackRate;
        [FieldOffset(0x30)] public ushort expItemNum;
        [FieldOffset(0x32)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x38)]
    public struct MiniBossWarshipLevelParam
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public MiniBossLevelCommonConfig commonConfig;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct MiniBossWarshipLevelBand
    {
        [FieldOffset(0x00)] public int level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct MiniBossWarshipRecoverBoostGaugeParam
    {
        [FieldOffset(0x00)] public float normal;
        [FieldOffset(0x04)] public float boost;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct MiniBossWarshipAttackStateParam
    {
        [FieldOffset(0x00)] public float moveSpeed;
        [FieldOffset(0x04)] public float bombDropSpeed;
        [FieldOffset(0x08)] public float bombInterval;
        [FieldOffset(0x0C)] public float explosionRadius;
        [FieldOffset(0x10)] public float bombPreDistEffectRange;
        [FieldOffset(0x14)] public float lifeTime;
        [FieldOffset(0x18)] public float preBombTime;
        [FieldOffset(0x1C)] public float preBombStateSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct MiniBossWarshipBattleFlagParam
    {
        [FieldOffset(0x00)] public float firstFinishTimer;
        [FieldOffset(0x04)] public float finishTimer;
        [FieldOffset(0x08)] public float disableHomingTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct MiniBossWarshipNearBattleCameraParam
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float minElevation;
        [FieldOffset(0x08)] public float maxElevation;
        [FieldOffset(0x0C)] public float targetUpOffset;
        [FieldOffset(0x10)] public float targetMinUpOffsetLimit;
        [FieldOffset(0x14)] public float targetMaxUpOffsetLimit;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct WarshipPathSectionInfo
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x04)] public float start;
        [FieldOffset(0x08)] public float end;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x4C0)]
    public struct WarshipEscapePathInfo
    {
        [FieldOffset(0x00)] public UnmanagedString followPaths;
        [FieldOffset(0x10)] public unsafe fixed byte /* WarshipPathSectionInfo[50] */ _usePathInfo[600];

        public unsafe WarshipPathSectionInfo* usePathInfo
        {
            get
            {
                fixed (byte* p_usePathInfo = _usePathInfo)
                    return (WarshipPathSectionInfo*)p_usePathInfo;
            }
        }

        [FieldOffset(0x268)] public unsafe fixed byte /* WarshipPathSectionInfo[50] */ _accelInfo[600];

        public unsafe WarshipPathSectionInfo* accelInfo
        {
            get
            {
                fixed (byte* p_accelInfo = _accelInfo)
                    return (WarshipPathSectionInfo*)p_accelInfo;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x17C0)]
    public struct MiniBossWarshipEscapePathParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* WarshipEscapePathInfo[5] */ _escapePathInfo[6080];

        public unsafe WarshipEscapePathInfo* escapePathInfo
        {
            get
            {
                fixed (byte* p_escapePathInfo = _escapePathInfo)
                    return (WarshipEscapePathInfo*)p_escapePathInfo;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct MiniBossWarshipBombAttackCameraParam
    {
        [FieldOffset(0x00)] public float lockonDistance;
        [FieldOffset(0x04)] public float unlockDistance;
        [FieldOffset(0x08)] public float duration;
        [FieldOffset(0x0C)] public float distance;
        [FieldOffset(0x10)] public float minElevation;
        [FieldOffset(0x14)] public float maxElevation;
        [FieldOffset(0x18)] public float lockonFrameYOffset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct MiniBossWarshipAttackStateCameraParam
    {
        [FieldOffset(0x00)] public float midCameraPosOffset;
        [FieldOffset(0x04)] public MiniBossWarshipBombAttackCameraParam firstCamera;
        [FieldOffset(0x20)] public MiniBossWarshipBombAttackCameraParam secondCamera;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x7AE0)]
    public struct MiniBossWarshipConfig
    {
        [FieldOffset(0x00)] public MiniBossWarshipCommonParam commonParam;
        [FieldOffset(0x130)] public unsafe fixed byte /* MiniBossWarshipLevelParam[5] */ _levelParams[280];

        public unsafe MiniBossWarshipLevelParam* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (MiniBossWarshipLevelParam*)p_levelParams;
            }
        }

        [FieldOffset(0x248)] public unsafe fixed byte /* MiniBossWarshipLevelBand[5] */ _levelBand[20];

        public unsafe MiniBossWarshipLevelBand* levelBand
        {
            get
            {
                fixed (byte* p_levelBand = _levelBand)
                    return (MiniBossWarshipLevelBand*)p_levelBand;
            }
        }

        [FieldOffset(0x25C)] public float wanderMoveSpeed;
        [FieldOffset(0x260)] public float railMaxLength;
        [FieldOffset(0x264)] public MiniBossWarshipSpeedParam shiftStateMoveSpeedParam;
        [FieldOffset(0x280)] public float locatorDistance;
        [FieldOffset(0x284)] public float distanceEscapePathToStart;
        [FieldOffset(0x288)] public MiniBossWarshipRecoverBoostGaugeParam boostGaugeParam;
        [FieldOffset(0x290)] public MiniBossWarshipAttackStateParam attackStateParam;
        [FieldOffset(0x2B0)] public MiniBossWarshipBattleFlagParam battleFlagParam;
        [FieldOffset(0x2BC)] public MiniBossWarshipNearBattleCameraParam nearBattleCameraParam;
        [FieldOffset(0x2D4)] public float disableGimmickDistance;
        [FieldOffset(0x2D8)] public float warpTime;
        [FieldOffset(0x2DC)] public float cameraChangeTime;
        [FieldOffset(0x2E0)] public float cameraAppearTime;
        [FieldOffset(0x2E4)] public float spreadHomingDistance;
        [FieldOffset(0x2E8)] public unsafe fixed byte /* MiniBossWarshipEscapePathParam[5] */ _escapePathID[30400];

        public unsafe MiniBossWarshipEscapePathParam* escapePathID
        {
            get
            {
                fixed (byte* p_escapePathID = _escapePathID)
                    return (MiniBossWarshipEscapePathParam*)p_escapePathID;
            }
        }

        [FieldOffset(0x79A8)] public unsafe fixed byte /* MiniBossWarshipAttackStateCameraParam[5] */ _bombAttackCameraParam[300];

        public unsafe MiniBossWarshipAttackStateCameraParam* bombAttackCameraParam
        {
            get
            {
                fixed (byte* p_bombAttackCameraParam = _bombAttackCameraParam)
                    return (MiniBossWarshipAttackStateCameraParam*)p_bombAttackCameraParam;
            }
        }
    }

}