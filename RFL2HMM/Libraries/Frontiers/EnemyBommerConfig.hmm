Library "EnemyBommerConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct RingParameter
    {
        [FieldOffset(0x00)] public float suckedTime;
        [FieldOffset(0x04)] public float launchAngle;
        [FieldOffset(0x08)] public float launchMaxSpeed;
        [FieldOffset(0x0C)] public float launchMinSpeed;
        [FieldOffset(0x10)] public float randomRangeMin;
        [FieldOffset(0x14)] public float randomRangeMax;
        [FieldOffset(0x18)] public float lifeTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct EnemyBommerPatrolConfig
    {
        [FieldOffset(0x00)] public float rotationDeceleration;
        [FieldOffset(0x04)] public float rotationAngleMax;
        [FieldOffset(0x08)] public float changeTimeIdlePatrolMin;
        [FieldOffset(0x0C)] public float changeTimeIdlePatrolMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct EnemyBommerAimingConfig
    {
        [FieldOffset(0x00)] public float moveDecerleration;
        [FieldOffset(0x04)] public float rotationAngleMax;
        [FieldOffset(0x08)] public float chargeTime;
        [FieldOffset(0x0C)] public float rotateSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct EnemyBommerAttackConfig
    {
        [FieldOffset(0x00)] public float moveVelocity;
        [FieldOffset(0x04)] public float moveDecerleration;
        [FieldOffset(0x08)] public float moveDecelerationDamaged;
        [FieldOffset(0x0C)] public float cooldownTime;
        [FieldOffset(0x10)] public float colliderOffsetRate;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x34)]
    public struct EnemyBommerChaseConfig
    {
        [FieldOffset(0x00)] public float moveVelocity;
        [FieldOffset(0x04)] public float moveAccerleration;
        [FieldOffset(0x08)] public float amplitude;
        [FieldOffset(0x0C)] public float period;
        [FieldOffset(0x10)] public float rotateSpeedInFront;
        [FieldOffset(0x14)] public float rotateSpeedOnBack;
        [FieldOffset(0x18)] public float chaseTime;
        [FieldOffset(0x1C)] public float parriedMoveDistance;
        [FieldOffset(0x20)] public float parriedShortenTime;
        [FieldOffset(0x24)] public float parriedCoolDownTime;
        [FieldOffset(0x28)] public float colliderOffsetRate;
        [FieldOffset(0x2C)] public float cameraDistance;
        [FieldOffset(0x30)] public float cameraElevation;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct DebrisParameter
    {
        [FieldOffset(0x00)] public int m_maxNumPieces;
        [FieldOffset(0x04)] public float gravity;
        [FieldOffset(0x08)] public float lifeTime;
        [FieldOffset(0x0C)] public float force;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xD0)]
    public struct EnemyBommerCommonConfig
    {
        [FieldOffset(0x00)] public RingParameter ringParam;
        [FieldOffset(0x1C)] public float mass;
        [FieldOffset(0x20)] public float slopeAngleMax;
        [FieldOffset(0x24)] public float checkBarrierDistance;
        [FieldOffset(0x28)] public float colliderRadius;
        [FieldOffset(0x2C)] public float colliderHeight;
        [FieldOffset(0x30)] public float damageColliderRadiusOffset;
        [FieldOffset(0x34)] public float eyesightDistance;
        [FieldOffset(0x38)] public float eyesightDistanceMargin;
        [FieldOffset(0x3C)] public EnemyBommerPatrolConfig patrolConfig;
        [FieldOffset(0x4C)] public EnemyBommerAimingConfig aimingConfig;
        [FieldOffset(0x5C)] public EnemyBommerAttackConfig attackConfig;
        [FieldOffset(0x70)] public EnemyBommerChaseConfig chaseConfig;
        [FieldOffset(0xA4)] public float explodeSignalTime;
        [FieldOffset(0xA8)] public float explodeColliderRadius;
        [FieldOffset(0xAC)] public bool useUniqueDebrisSetting;
        [FieldOffset(0xB0)] public DebrisParameter debrisExplode;
        [FieldOffset(0xC0)] public DebrisParameter debrisCyloop;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct BommerCommonLevelConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public float attackRate;
        [FieldOffset(0x08)] public ushort expItemNum;
        [FieldOffset(0x0A)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct EnemyBommerLevelConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public BommerCommonLevelConfig common;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x120)]
    public struct EnemyBommerConfig
    {
        [FieldOffset(0x00)] public EnemyBommerCommonConfig commonParams;
        [FieldOffset(0xD0)] public unsafe fixed byte /* EnemyBommerLevelConfig[5] */ _levelParams[80];

        public unsafe EnemyBommerLevelConfig* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (EnemyBommerLevelConfig*)p_levelParams;
            }
        }
    }

}