Library "IslandParameter"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x02)]
    public struct ChaosEmeraldStorageParam
    {
        [FieldOffset(0x00)] public bool isEnable;
        [FieldOffset(0x01)] public sbyte useKeyNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0E)]
    public struct IslandParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* ChaosEmeraldStorageParam[7] */ _storages[14];

        public unsafe ChaosEmeraldStorageParam* storages
        {
            get
            {
                fixed (byte* p_storages = _storages)
                    return (ChaosEmeraldStorageParam*)p_storages;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x02)]
    public struct ExtraTowerParam
    {
        [FieldOffset(0x00)] public bool isEnable;
        [FieldOffset(0x01)] public sbyte useKeyNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0A)]
    public struct ExtraIslandParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* ExtraTowerParam[5] */ _extratowers[10];

        public unsafe ExtraTowerParam* extratowers
        {
            get
            {
                fixed (byte* p_extratowers = _extratowers)
                    return (ExtraTowerParam*)p_extratowers;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct KodamaCommonParam
    {
        [FieldOffset(0x00)] public float takableRange;
        [FieldOffset(0x04)] public float fadeTime;
        [FieldOffset(0x08)] public float chestJumpOutFadeTime;
        [FieldOffset(0x0C)] public float tutorialDelayTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct KodamaFollowParam
    {
        [FieldOffset(0x00)] public sbyte maxFollowNum;
        [FieldOffset(0x04)] public float speed;
        [FieldOffset(0x08)] public float rotateSpeed;
        [FieldOffset(0x0C)] public float stopDistance;
        [FieldOffset(0x10)] public float vanishDistance;
        [FieldOffset(0x14)] public float respawnStandTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct KodamaNormalParam
    {
        [FieldOffset(0x00)] public KodamaCommonParam common;
        [FieldOffset(0x10)] public KodamaFollowParam follow;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct KodamaElderParam
    {
        [FieldOffset(0x00)] public unsafe fixed int levelupKodamaNum[3];
        [FieldOffset(0x0C)] public unsafe fixed int levelupKodamaNumFriends[3];
        [FieldOffset(0x18)] public int amyRequiredKodamaNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct KodamaHermitLvUpParam
    {
        [FieldOffset(0x00)] public unsafe fixed int difficulty[3];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x94C)]
    public struct KodamaHermitParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* KodamaHermitLvUpParam[99] */ _levelupSeedNum[1188];

        public unsafe KodamaHermitLvUpParam* levelupSeedNum
        {
            get
            {
                fixed (byte* p_levelupSeedNum = _levelupSeedNum)
                    return (KodamaHermitLvUpParam*)p_levelupSeedNum;
            }
        }

        [FieldOffset(0x4A4)] public unsafe fixed byte /* KodamaHermitLvUpParam[99] */ _levelupSeedNumFriends[1188];

        public unsafe KodamaHermitLvUpParam* levelupSeedNumFriends
        {
            get
            {
                fixed (byte* p_levelupSeedNumFriends = _levelupSeedNumFriends)
                    return (KodamaHermitLvUpParam*)p_levelupSeedNumFriends;
            }
        }

        [FieldOffset(0x948)] public int amyRequiredKodamaNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct KodamaNewFormParam
    {
        [FieldOffset(0x00)] public float takableRange;
        [FieldOffset(0x04)] public float colliderRange;
        [FieldOffset(0x08)] public float fadeTime;
        [FieldOffset(0x0C)] public float spaceVertical;
        [FieldOffset(0x10)] public float spaceHorizontal;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA30)]
    public struct KodamaParam
    {
        [FieldOffset(0x00)] public KodamaNormalParam normal;
        [FieldOffset(0x28)] public KodamaElderParam elder;
        [FieldOffset(0x44)] public KodamaHermitParam hermit;
        [FieldOffset(0x990)] public unsafe fixed byte /* KodamaNewFormParam[8] */ _newform[160];

        public unsafe KodamaNewFormParam* newform
        {
            get
            {
                fixed (byte* p_newform = _newform)
                    return (KodamaNewFormParam*)p_newform;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct NpcParam
    {
        [FieldOffset(0x00)] public int inputSequenceItemNumShort;
        [FieldOffset(0x04)] public int inputSequenceItemNumMiddle;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA8C)]
    public struct IslandParameter
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* IslandParam[5] */ _islands[70];

        public unsafe IslandParam* islands
        {
            get
            {
                fixed (byte* p_islands = _islands)
                    return (IslandParam*)p_islands;
            }
        }

        [FieldOffset(0x46)] public ExtraIslandParam extraIsland;
        [FieldOffset(0x50)] public KodamaParam kodama;
        [FieldOffset(0xA80)] public NpcParam npc;
        [FieldOffset(0xA88)] public int portalExtraKeyNum;
    }

}