Library "MiniBossChargerConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossCommonConfig
    {
        [FieldOffset(0x00)] public float scoutDistance;
        [FieldOffset(0x04)] public float scoutDistanceOutside;
        [FieldOffset(0x08)] public float zoomDistance;
        [FieldOffset(0x10)] public Vector3 zoomOffset;
        [FieldOffset(0x20)] public Vector3 zoomAngle;
        [FieldOffset(0x30)] public float zoomFov;
    }

    public enum BarrageType : sbyte
    {
        TYPE_LASER = 0,
        TYPE_BALL = 1,
        TYPE_BALL_L = 2,
        TYPE_BALL_LL = 3,
        TYPE_AIR_DROP = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x58)]
    public struct MiniBossChagerBarrageParam
    {
        [FieldOffset(0x00)] public BarrageType type;
        [FieldOffset(0x08)] public UnmanagedString damageTag;
        [FieldOffset(0x18)] public float startSpeed;
        [FieldOffset(0x1C)] public float decelePower;
        [FieldOffset(0x20)] public float minSpeed;
        [FieldOffset(0x24)] public float lifeTime;
        [FieldOffset(0x28)] public float waitTime;
        [FieldOffset(0x2C)] public float lineTime;
        [FieldOffset(0x30)] public float scale;
        [FieldOffset(0x34)] public float hitVelocity;
        [FieldOffset(0x38)] public float parriedSpeed;
        [FieldOffset(0x3C)] public int parriedDamage;
        [FieldOffset(0x40)] public float parriedStaggerValue;
        [FieldOffset(0x44)] public float parriedStunValue;
        [FieldOffset(0x48)] public UnmanagedString hitEffName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct MiniBossChagerSimpleRotateBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public int muzzleNum;
        [FieldOffset(0x0C)] public float yOffset;
        [FieldOffset(0x10)] public float zOffset;
        [FieldOffset(0x14)] public float heightLength;
        [FieldOffset(0x18)] public float rotSpeed;
        [FieldOffset(0x1C)] public float shakeSpeed;
        [FieldOffset(0x20)] public float intervalTime;
        [FieldOffset(0x24)] public float activeTime;
        [FieldOffset(0x28)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x24)]
    public struct MiniBossChagerFollowLaser
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float zOffset;
        [FieldOffset(0x0C)] public float moveSpeed;
        [FieldOffset(0x10)] public float followDeg;
        [FieldOffset(0x14)] public int shotNum;
        [FieldOffset(0x18)] public float intervalTime;
        [FieldOffset(0x1C)] public float lifeTime;
        [FieldOffset(0x20)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct MiniBossChagerVortexLaser
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public int muzzleNum;
        [FieldOffset(0x08)] public float yOffset;
        [FieldOffset(0x0C)] public float zOffset;
        [FieldOffset(0x10)] public float rotSpeed;
        [FieldOffset(0x14)] public float moveSpeed;
        [FieldOffset(0x18)] public float activeTime;
        [FieldOffset(0x1C)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct MiniBossChagerCrossLaser
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public float moveSpeed;
        [FieldOffset(0x08)] public float setDeg;
        [FieldOffset(0x0C)] public float lifeTime;
        [FieldOffset(0x10)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct MiniBossChagerCrossBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float zOffset;
        [FieldOffset(0x0C)] public bool isFollowPlayer;
        [FieldOffset(0x10)] public float startWaitTime;
        [FieldOffset(0x14)] public float shotIntarval;
        [FieldOffset(0x18)] public float maxAngle;
        [FieldOffset(0x1C)] public float rotateSpeed;
        [FieldOffset(0x20)] public float rotateAngle;
        [FieldOffset(0x24)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct MiniBossChagerMassLaser
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float scale;
        [FieldOffset(0x0C)] public float lifeTime;
        [FieldOffset(0x10)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct MiniBossChagerVerticalRoundBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public int muzzleNum;
        [FieldOffset(0x0C)] public int verticalNum;
        [FieldOffset(0x10)] public float radius;
        [FieldOffset(0x14)] public float spaceRate;
        [FieldOffset(0x18)] public float verticalWaitTime;
        [FieldOffset(0x1C)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct MiniBossPyramidRoundBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public int muzzleNum;
        [FieldOffset(0x0C)] public float radius;
        [FieldOffset(0x10)] public float height;
        [FieldOffset(0x14)] public float scale;
        [FieldOffset(0x18)] public int sideNum;
        [FieldOffset(0x1C)] public int attackNum;
        [FieldOffset(0x20)] public float intervalTime;
        [FieldOffset(0x24)] public float nextDeg;
        [FieldOffset(0x28)] public float shotWaitTime;
        [FieldOffset(0x2C)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct MiniBossPlaneUpDownBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public float yOffset;
        [FieldOffset(0x0C)] public float scale;
        [FieldOffset(0x10)] public float step;
        [FieldOffset(0x14)] public int allNum;
        [FieldOffset(0x18)] public float upRate;
        [FieldOffset(0x1C)] public float downRate;
        [FieldOffset(0x20)] public float frontRate;
        [FieldOffset(0x24)] public float shotWaitTimeMin;
        [FieldOffset(0x28)] public float shotWaitTimeMax;
        [FieldOffset(0x2C)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct MiniBossTriangleBatteryBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public float yOffset;
        [FieldOffset(0x0C)] public float edgeLength;
        [FieldOffset(0x10)] public float activeTime;
        [FieldOffset(0x14)] public float intervalTime;
        [FieldOffset(0x18)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct MiniBossPlayerFallBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public float yOffset;
        [FieldOffset(0x0C)] public float scale;
        [FieldOffset(0x10)] public float lengthMin;
        [FieldOffset(0x14)] public float lengthMax;
        [FieldOffset(0x18)] public float intervalTime;
        [FieldOffset(0x1C)] public float shotWaitTime;
        [FieldOffset(0x20)] public float activeTime;
        [FieldOffset(0x24)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct MiniBossGatlingRevolverBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float startWaitTime;
        [FieldOffset(0x08)] public float yOffset;
        [FieldOffset(0x0C)] public float zOffset;
        [FieldOffset(0x10)] public float scale;
        [FieldOffset(0x14)] public int muzzleNum;
        [FieldOffset(0x18)] public float bulletRad;
        [FieldOffset(0x1C)] public float intervalTime;
        [FieldOffset(0x20)] public float activeTime;
        [FieldOffset(0x24)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct MiniBossWinderBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float zOffset;
        [FieldOffset(0x0C)] public bool isFollowPlayer;
        [FieldOffset(0x10)] public float shotIntarval;
        [FieldOffset(0x14)] public float maxAngle;
        [FieldOffset(0x18)] public float rotateSpeed;
        [FieldOffset(0x1C)] public float rotateAngle;
        [FieldOffset(0x20)] public float barrageAngleDiff;
        [FieldOffset(0x24)] public float startWaitTime;
        [FieldOffset(0x28)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct MiniBossShotgunBullet
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float zOffset;
        [FieldOffset(0x0C)] public bool isFollowPlayer;
        [FieldOffset(0x10)] public float shotIntarval;
        [FieldOffset(0x14)] public float maxAngle;
        [FieldOffset(0x18)] public float yAngleOffset;
        [FieldOffset(0x1C)] public float shotTime;
        [FieldOffset(0x20)] public float addSpeedMax;
        [FieldOffset(0x24)] public float startWaitTime;
        [FieldOffset(0x28)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct MiniBossChagerAirDrop
    {
        [FieldOffset(0x00)] public int barrageIndex;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float zOffset;
        [FieldOffset(0x0C)] public float upRotOffset;
        [FieldOffset(0x10)] public float yAngleOffset;
        [FieldOffset(0x14)] public float maxAngle;
        [FieldOffset(0x18)] public float shotTime;
        [FieldOffset(0x1C)] public float addSpeedMax;
        [FieldOffset(0x20)] public float lineTime;
        [FieldOffset(0x24)] public float fallPower;
        [FieldOffset(0x28)] public float startWaitTime;
        [FieldOffset(0x2C)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct MiniBossChagerGroundObj
    {
        [FieldOffset(0x00)] public int bulletDamage;
        [FieldOffset(0x04)] public float bulletStaggerPoint;
        [FieldOffset(0x08)] public float bulletSpeed;
        [FieldOffset(0x0C)] public float bulletFallSpeed;
        [FieldOffset(0x10)] public float bulletCyloopSpeed;
        [FieldOffset(0x14)] public float bulletGroundTime;
        [FieldOffset(0x18)] public float bulletFallTime;
        [FieldOffset(0x1C)] public float yOffset;
        [FieldOffset(0x20)] public float zOffset;
        [FieldOffset(0x24)] public float upRotOffset;
        [FieldOffset(0x28)] public float yAngleOffset;
        [FieldOffset(0x2C)] public float maxAngle;
        [FieldOffset(0x30)] public float shotTime;
        [FieldOffset(0x34)] public float startWaitTime;
        [FieldOffset(0x38)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x150)]
    public struct MiniBossChagerDiffuseLaser
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public float yOffset;
        [FieldOffset(0x08)] public float scale;
        [FieldOffset(0x0C)] public int muzzleNum;
        [FieldOffset(0x10)] public unsafe fixed byte /* Vector3[10] */ _muzzlePosOffset[160];

        public unsafe Vector3* muzzlePosOffset
        {
            get
            {
                fixed (byte* p_muzzlePosOffset = _muzzlePosOffset)
                    return (Vector3*)p_muzzlePosOffset;
            }
        }

        [FieldOffset(0xB0)] public unsafe fixed float muzzleRotOffset[10];
        [FieldOffset(0xD8)] public unsafe fixed float muzzleTimeOffset[10];
        [FieldOffset(0x100)] public unsafe fixed float muzzleLaserStartOffset[10];
        [FieldOffset(0x128)] public int laserNum;
        [FieldOffset(0x12C)] public int attackNum;
        [FieldOffset(0x130)] public float laserRandomRange;
        [FieldOffset(0x134)] public float laserTime;
        [FieldOffset(0x138)] public float laserEndTime;
        [FieldOffset(0x13C)] public float laserNextTime;
        [FieldOffset(0x140)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x180)]
    public struct MiniBossChagerChaseShot
    {
        [FieldOffset(0x00)] public float startWaitTime;
        [FieldOffset(0x04)] public int muzzleNum;
        [FieldOffset(0x10)] public unsafe fixed byte /* Vector3[10] */ _muzzlePosOffset[160];

        public unsafe Vector3* muzzlePosOffset
        {
            get
            {
                fixed (byte* p_muzzlePosOffset = _muzzlePosOffset)
                    return (Vector3*)p_muzzlePosOffset;
            }
        }

        [FieldOffset(0xB0)] public unsafe fixed float muzzleRotOffsetX[10];
        [FieldOffset(0xD8)] public unsafe fixed float muzzleRotOffsetY[10];
        [FieldOffset(0x100)] public unsafe fixed float muzzleTimeOffset[10];
        [FieldOffset(0x128)] public unsafe fixed float muzzleLaserStartOffset[10];
        [FieldOffset(0x150)] public float laserShotTimeMin;
        [FieldOffset(0x154)] public float laserShotTimeMax;
        [FieldOffset(0x158)] public int laserNum;
        [FieldOffset(0x15C)] public float laserRange;
        [FieldOffset(0x160)] public float laserEndTime;
        [FieldOffset(0x164)] public float laserSpeed;
        [FieldOffset(0x168)] public float laserRandomRangeMin;
        [FieldOffset(0x16C)] public float laserRandomRangeMax;
        [FieldOffset(0x170)] public float laserHomingTime;
        [FieldOffset(0x174)] public float endWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossChargerCatchParam
    {
        [FieldOffset(0x00)] public float hitDistance;
        [FieldOffset(0x04)] public float durationBind;
        [FieldOffset(0x08)] public float distanceStartBlackOut;
        [FieldOffset(0x0C)] public float timeEaseBlackOut;
        [FieldOffset(0x10)] public float timeDelayEndtBlackOut;
        [FieldOffset(0x20)] public Vector3 tangentFrom;
        [FieldOffset(0x30)] public Vector3 tangentTo;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x15C0)]
    public struct MiniBossChargerCommonParam
    {
        [FieldOffset(0x00)] public MiniBossCommonConfig commonConfig;
        [FieldOffset(0x40)] public unsafe fixed byte /* MiniBossChagerBarrageParam[16] */ _barrage[1408];

        public unsafe MiniBossChagerBarrageParam* barrage
        {
            get
            {
                fixed (byte* p_barrage = _barrage)
                    return (MiniBossChagerBarrageParam*)p_barrage;
            }
        }

        [FieldOffset(0x5C0)] public unsafe fixed byte /* MiniBossChagerSimpleRotateBullet[3] */ _simpleRotateBullet[132];

        public unsafe MiniBossChagerSimpleRotateBullet* simpleRotateBullet
        {
            get
            {
                fixed (byte* p_simpleRotateBullet = _simpleRotateBullet)
                    return (MiniBossChagerSimpleRotateBullet*)p_simpleRotateBullet;
            }
        }

        [FieldOffset(0x644)] public unsafe fixed byte /* MiniBossChagerFollowLaser[3] */ _followLaser[108];

        public unsafe MiniBossChagerFollowLaser* followLaser
        {
            get
            {
                fixed (byte* p_followLaser = _followLaser)
                    return (MiniBossChagerFollowLaser*)p_followLaser;
            }
        }

        [FieldOffset(0x6B0)] public unsafe fixed byte /* MiniBossChagerVortexLaser[3] */ _vortexLaser[96];

        public unsafe MiniBossChagerVortexLaser* vortexLaser
        {
            get
            {
                fixed (byte* p_vortexLaser = _vortexLaser)
                    return (MiniBossChagerVortexLaser*)p_vortexLaser;
            }
        }

        [FieldOffset(0x710)] public unsafe fixed byte /* MiniBossChagerCrossLaser[3] */ _crossLaser[60];

        public unsafe MiniBossChagerCrossLaser* crossLaser
        {
            get
            {
                fixed (byte* p_crossLaser = _crossLaser)
                    return (MiniBossChagerCrossLaser*)p_crossLaser;
            }
        }

        [FieldOffset(0x74C)] public unsafe fixed byte /* MiniBossChagerCrossBullet[3] */ _crossBullet[120];

        public unsafe MiniBossChagerCrossBullet* crossBullet
        {
            get
            {
                fixed (byte* p_crossBullet = _crossBullet)
                    return (MiniBossChagerCrossBullet*)p_crossBullet;
            }
        }

        [FieldOffset(0x7C4)] public unsafe fixed byte /* MiniBossChagerMassLaser[3] */ _massLaser[60];

        public unsafe MiniBossChagerMassLaser* massLaser
        {
            get
            {
                fixed (byte* p_massLaser = _massLaser)
                    return (MiniBossChagerMassLaser*)p_massLaser;
            }
        }

        [FieldOffset(0x800)] public unsafe fixed byte /* MiniBossChagerVerticalRoundBullet[3] */ _verticalRoundBullet[96];

        public unsafe MiniBossChagerVerticalRoundBullet* verticalRoundBullet
        {
            get
            {
                fixed (byte* p_verticalRoundBullet = _verticalRoundBullet)
                    return (MiniBossChagerVerticalRoundBullet*)p_verticalRoundBullet;
            }
        }

        [FieldOffset(0x860)] public unsafe fixed byte /* MiniBossPyramidRoundBullet[3] */ _pyramidRoundBullet[144];

        public unsafe MiniBossPyramidRoundBullet* pyramidRoundBullet
        {
            get
            {
                fixed (byte* p_pyramidRoundBullet = _pyramidRoundBullet)
                    return (MiniBossPyramidRoundBullet*)p_pyramidRoundBullet;
            }
        }

        [FieldOffset(0x8F0)] public unsafe fixed byte /* MiniBossPlaneUpDownBullet[3] */ _planeUpDownBullet[144];

        public unsafe MiniBossPlaneUpDownBullet* planeUpDownBullet
        {
            get
            {
                fixed (byte* p_planeUpDownBullet = _planeUpDownBullet)
                    return (MiniBossPlaneUpDownBullet*)p_planeUpDownBullet;
            }
        }

        [FieldOffset(0x980)] public unsafe fixed byte /* MiniBossTriangleBatteryBullet[3] */ _triangleBatteryBullet[84];

        public unsafe MiniBossTriangleBatteryBullet* triangleBatteryBullet
        {
            get
            {
                fixed (byte* p_triangleBatteryBullet = _triangleBatteryBullet)
                    return (MiniBossTriangleBatteryBullet*)p_triangleBatteryBullet;
            }
        }

        [FieldOffset(0x9D4)] public unsafe fixed byte /* MiniBossPlayerFallBullet[3] */ _playerFallBullet[120];

        public unsafe MiniBossPlayerFallBullet* playerFallBullet
        {
            get
            {
                fixed (byte* p_playerFallBullet = _playerFallBullet)
                    return (MiniBossPlayerFallBullet*)p_playerFallBullet;
            }
        }

        [FieldOffset(0xA4C)] public unsafe fixed byte /* MiniBossGatlingRevolverBullet[3] */ _gatlingRevolverBullet[120];

        public unsafe MiniBossGatlingRevolverBullet* gatlingRevolverBullet
        {
            get
            {
                fixed (byte* p_gatlingRevolverBullet = _gatlingRevolverBullet)
                    return (MiniBossGatlingRevolverBullet*)p_gatlingRevolverBullet;
            }
        }

        [FieldOffset(0xAC4)] public unsafe fixed byte /* MiniBossWinderBullet[3] */ _winderBullet[132];

        public unsafe MiniBossWinderBullet* winderBullet
        {
            get
            {
                fixed (byte* p_winderBullet = _winderBullet)
                    return (MiniBossWinderBullet*)p_winderBullet;
            }
        }

        [FieldOffset(0xB48)] public unsafe fixed byte /* MiniBossShotgunBullet[3] */ _shotgunBullet[132];

        public unsafe MiniBossShotgunBullet* shotgunBullet
        {
            get
            {
                fixed (byte* p_shotgunBullet = _shotgunBullet)
                    return (MiniBossShotgunBullet*)p_shotgunBullet;
            }
        }

        [FieldOffset(0xBCC)] public unsafe fixed byte /* MiniBossChagerAirDrop[3] */ _airDrop[144];

        public unsafe MiniBossChagerAirDrop* airDrop
        {
            get
            {
                fixed (byte* p_airDrop = _airDrop)
                    return (MiniBossChagerAirDrop*)p_airDrop;
            }
        }

        [FieldOffset(0xC5C)] public unsafe fixed byte /* MiniBossChagerGroundObj[3] */ _groundObj[180];

        public unsafe MiniBossChagerGroundObj* groundObj
        {
            get
            {
                fixed (byte* p_groundObj = _groundObj)
                    return (MiniBossChagerGroundObj*)p_groundObj;
            }
        }

        [FieldOffset(0xD10)] public unsafe fixed byte /* MiniBossChagerDiffuseLaser[3] */ _diffuseLaser[1008];

        public unsafe MiniBossChagerDiffuseLaser* diffuseLaser
        {
            get
            {
                fixed (byte* p_diffuseLaser = _diffuseLaser)
                    return (MiniBossChagerDiffuseLaser*)p_diffuseLaser;
            }
        }

        [FieldOffset(0x1100)] public unsafe fixed byte /* MiniBossChagerChaseShot[3] */ _chaseShot[1152];

        public unsafe MiniBossChagerChaseShot* chaseShot
        {
            get
            {
                fixed (byte* p_chaseShot = _chaseShot)
                    return (MiniBossChagerChaseShot*)p_chaseShot;
            }
        }

        [FieldOffset(0x1580)] public MiniBossChargerCatchParam atkCatch;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x34)]
    public struct MiniBossLevelCommonConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x10)] public float stunDecreaseStartTime;
        [FieldOffset(0x14)] public float stunDecreaseSpeed;
        [FieldOffset(0x18)] public unsafe fixed float maxStaggerPoint[3];
        [FieldOffset(0x24)] public float staggerDecreaseStartTime;
        [FieldOffset(0x28)] public float staggerDecreaseSpeed;
        [FieldOffset(0x2C)] public float attackRate;
        [FieldOffset(0x30)] public ushort expItemNum;
        [FieldOffset(0x32)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct MiniBossChargerLevelParam
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public MiniBossLevelCommonConfig commonConfig;
        [FieldOffset(0x38)] public float stunTime;
    }

    public enum AttackType : int
    {
        AttackTypeInvalid = 0,
        AttackSimpleRotateBullet = 1,
        AttackFollowLaser = 2,
        AttackVortexLaser = 3,
        AttackCrossLaser = 4,
        AttackCrossBullet = 5,
        AttackMassLaser = 6,
        AttackVerticalRoundBullet = 7,
        AttackPyramidRoundBullet = 8,
        AttackPlaneUpDownBullet = 9,
        AttackTriangleBatteryBullet = 10,
        AttackPlayerFallBullet = 11,
        AttackGatlingRevolverBullet = 12,
        AttackWinderBullet = 13,
        AttackShotgunBullet = 14,
        AttackAirDropBullet = 15,
        AttackChaseShotObject = 16,
        AttackDiffuseLaser = 17,
        AttackChaseShot = 18,
        AttackTypeNum = 19
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct MiniBossChargerHPRateParam
    {
        [FieldOffset(0x00)] public int rateHp;
        [FieldOffset(0x08)] public UnmanagedString grindSetName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xB8)]
    public struct MiniBossChargerLevelBand
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public float rate;
        [FieldOffset(0x08)] public float chanceTime;
        [FieldOffset(0x0C)] public float chanceTimeMoveSpeed;
        [FieldOffset(0x10)] public float chanceTimeDecSpeed;
        [FieldOffset(0x14)] public float chanceTimeSpeedMin;
        [FieldOffset(0x18)] public float damageTime;
        [FieldOffset(0x1C)] public float chanceTimeAddSpeed;
        [FieldOffset(0x20)] public unsafe fixed byte /* AttackType[10] */ _attackTable[40];

        public unsafe AttackType* attackTable
        {
            get
            {
                fixed (byte* p_attackTable = _attackTable)
                    return (AttackType*)p_attackTable;
            }
        }

        [FieldOffset(0x48)] public unsafe fixed int attackIndexTable[10];
        [FieldOffset(0x70)] public unsafe fixed byte /* MiniBossChargerHPRateParam[3] */ _hpRateParams[72];

        public unsafe MiniBossChargerHPRateParam* hpRateParams
        {
            get
            {
                fixed (byte* p_hpRateParams = _hpRateParams)
                    return (MiniBossChargerHPRateParam*)p_hpRateParams;
            }
        }
    }

    public enum MiniBossChargerLevel1_AttackType : int
    {
        MiniBossChargerLevel1_AttackType_AttackTypeInvalid = 0,
        MiniBossChargerLevel1_AttackType_AttackSimpleRotateBullet = 1,
        MiniBossChargerLevel1_AttackType_AttackFollowLaser = 2,
        MiniBossChargerLevel1_AttackType_AttackVortexLaser = 3,
        MiniBossChargerLevel1_AttackType_AttackCrossLaser = 4,
        MiniBossChargerLevel1_AttackType_AttackCrossBullet = 5,
        MiniBossChargerLevel1_AttackType_AttackMassLaser = 6,
        MiniBossChargerLevel1_AttackType_AttackVerticalRoundBullet = 7,
        MiniBossChargerLevel1_AttackType_AttackPyramidRoundBullet = 8,
        MiniBossChargerLevel1_AttackType_AttackPlaneUpDownBullet = 9,
        MiniBossChargerLevel1_AttackType_AttackTriangleBatteryBullet = 10,
        MiniBossChargerLevel1_AttackType_AttackPlayerFallBullet = 11,
        MiniBossChargerLevel1_AttackType_AttackGatlingRevolverBullet = 12,
        MiniBossChargerLevel1_AttackType_AttackWinderBullet = 13,
        MiniBossChargerLevel1_AttackType_AttackShotgunBullet = 14,
        MiniBossChargerLevel1_AttackType_AttackAirDropBullet = 15,
        MiniBossChargerLevel1_AttackType_AttackChaseShotObject = 16,
        MiniBossChargerLevel1_AttackType_AttackDiffuseLaser = 17,
        MiniBossChargerLevel1_AttackType_AttackChaseShot = 18,
        MiniBossChargerLevel1_AttackType_AttackTypeNum = 19
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct MiniBossChargerLevel1
    {
        [FieldOffset(0x00)] public float range;
        [FieldOffset(0x04)] public unsafe fixed byte /* MiniBossChargerLevel1_AttackType[2] */ _attackTable[8];

        public unsafe MiniBossChargerLevel1_AttackType* attackTable
        {
            get
            {
                fixed (byte* p_attackTable = _attackTable)
                    return (MiniBossChargerLevel1_AttackType*)p_attackTable;
            }
        }

        [FieldOffset(0x0C)] public unsafe fixed int attackIndexTable[2];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1AB0)]
    public struct MiniBossChargerConfig
    {
        [FieldOffset(0x00)] public MiniBossChargerCommonParam commonParam;
        [FieldOffset(0x15C0)] public unsafe fixed byte /* MiniBossChargerLevelParam[5] */ _levelParams[300];

        public unsafe MiniBossChargerLevelParam* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (MiniBossChargerLevelParam*)p_levelParams;
            }
        }

        [FieldOffset(0x16F0)] public unsafe fixed byte /* MiniBossChargerLevelBand[5] */ _levelBands[920];

        public unsafe MiniBossChargerLevelBand* levelBands
        {
            get
            {
                fixed (byte* p_levelBands = _levelBands)
                    return (MiniBossChargerLevelBand*)p_levelBands;
            }
        }

        [FieldOffset(0x1A88)] public unsafe fixed byte /* MiniBossChargerLevel1[2] */ _level1Params[40];

        public unsafe MiniBossChargerLevel1* level1Params
        {
            get
            {
                fixed (byte* p_level1Params = _level1Params)
                    return (MiniBossChargerLevel1*)p_level1Params;
            }
        }
    }

}