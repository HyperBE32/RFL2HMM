Library "MiniBossFlyerConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct MiniBossCommonConfig
    {
        [FieldOffset(0x00)] public float scoutDistance;
        [FieldOffset(0x04)] public float scoutDistanceOutside;
        [FieldOffset(0x08)] public float zoomDistance;
        [FieldOffset(0x10)] public Vector3 zoomOffset;
        [FieldOffset(0x20)] public Vector3 zoomAngle;
        [FieldOffset(0x30)] public float zoomFov;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct FlyerTrailParam
    {
        [FieldOffset(0x00)] public float interval;
        [FieldOffset(0x04)] public int recordNumWander;
        [FieldOffset(0x08)] public int recordNumWatch;
        [FieldOffset(0x0C)] public int recordNumBattle;
        [FieldOffset(0x10)] public float width;
        [FieldOffset(0x14)] public float wallHeight;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct FlyerWanderParam
    {
        [FieldOffset(0x00)] public float speed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct FlyerWatchShotParam
    {
        [FieldOffset(0x00)] public float interval;
        [FieldOffset(0x04)] public float readyDuration;
        [FieldOffset(0x08)] public float shotAnimSpeed;
        [FieldOffset(0x0C)] public uint shotAnimNum;
        [FieldOffset(0x10)] public float speed;
        [FieldOffset(0x14)] public float lifeTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct FlyerWatchParam
    {
        [FieldOffset(0x00)] public float speed;
        [FieldOffset(0x04)] public float changeWanderTime;
        [FieldOffset(0x08)] public FlyerWatchShotParam shot;
    }

    public enum HorizontalType : sbyte
    {
        HorzCenter = 0,
        HorzLeft = 1,
        HorzRight = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x06)]
    public struct FlyerEscapeShotTableData
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* HorizontalType[6] */ _horz[6];

        public unsafe HorizontalType* horz
        {
            get
            {
                fixed (byte* p_horz = _horz)
                    return (HorizontalType*)p_horz;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x88)]
    public struct FlyerEscapeShotParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* FlyerEscapeShotTableData[16] */ _posTable[96];

        public unsafe FlyerEscapeShotTableData* posTable
        {
            get
            {
                fixed (byte* p_posTable = _posTable)
                    return (FlyerEscapeShotTableData*)p_posTable;
            }
        }

        [FieldOffset(0x60)] public float interval;
        [FieldOffset(0x64)] public float waitAfterLoop;
        [FieldOffset(0x68)] public float readyDuration;
        [FieldOffset(0x6C)] public float shotAnimSpeed;
        [FieldOffset(0x70)] public uint shotAnimNum;
        [FieldOffset(0x74)] public float initSpeed;
        [FieldOffset(0x78)] public float maxSpeed;
        [FieldOffset(0x7C)] public float acc;
        [FieldOffset(0x80)] public float lifeTime;
        [FieldOffset(0x84)] public float nearest;
    }

    public enum PlayerOffsetType : sbyte
    {
        PLAYER_OFFSET_NORMAL = 0,
        PLAYER_OFFSET_ABSOLUTE = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct FlyerEscapeCameraParam
    {
        [FieldOffset(0x00)] public float fovy;
        [FieldOffset(0x04)] public float zRot;
        [FieldOffset(0x08)] public float distance;
        [FieldOffset(0x0C)] public float pathOffset;
        [FieldOffset(0x10)] public bool usePathVerticalComponent;
        [FieldOffset(0x11)] public bool usePathNormal;
        [FieldOffset(0x14)] public float angleSensitivity;
        [FieldOffset(0x18)] public float angleSensitivityBoost;
        [FieldOffset(0x1C)] public float azimuthOffsetDeg;
        [FieldOffset(0x20)] public float elevationOffsetDeg;
        [FieldOffset(0x24)] public float gravityOffset;
        [FieldOffset(0x30)] public Vector3 playerOffset;
        [FieldOffset(0x40)] public PlayerOffsetType playerOffsetType;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct FlyerEscapeQuickStepParam
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x04)] public float speed;
        [FieldOffset(0x08)] public float boostSpeed;
        [FieldOffset(0x0C)] public float boostSpeedMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x100)]
    public struct FlyerEscapeParam
    {
        [FieldOffset(0x00)] public float startSpeed;
        [FieldOffset(0x04)] public float decrease;
        [FieldOffset(0x08)] public float minSpeed;
        [FieldOffset(0x0C)] public float targetDisableTime;
        [FieldOffset(0x10)] public float resetByFallTime;
        [FieldOffset(0x14)] public float resetByDistance;
        [FieldOffset(0x18)] public FlyerEscapeShotParam shot;
        [FieldOffset(0xA0)] public FlyerEscapeCameraParam camera;
        [FieldOffset(0xF0)] public FlyerEscapeQuickStepParam quickStep;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct FlyerNearStartCamParam
    {
        [FieldOffset(0x00)] public float duration;
        [FieldOffset(0x10)] public Vector3 posOffset;
        [FieldOffset(0x20)] public float fovy;
        [FieldOffset(0x24)] public float interpolateTimePush;
        [FieldOffset(0x28)] public float interpolateTimePop;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct FlyerIdlingNearParam
    {
        [FieldOffset(0x00)] public float durationMin;
        [FieldOffset(0x04)] public float durationMax;
        [FieldOffset(0x08)] public unsafe fixed uint selectRatio[2];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct FlyerGuardParam
    {
        [FieldOffset(0x00)] public float duration;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct FlyerAutoLockonParam
    {
        [FieldOffset(0x00)] public float lockonDistance;
        [FieldOffset(0x04)] public float unlockDistance;
        [FieldOffset(0x08)] public float distance;
        [FieldOffset(0x0C)] public float minElevation;
        [FieldOffset(0x10)] public float maxElevation;
        [FieldOffset(0x14)] public float panningSuspensionK;
        [FieldOffset(0x18)] public float interiorPanningSuspensionK;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct FlyerNearEndLaunchParam
    {
        [FieldOffset(0x00)] public float outStrength;
        [FieldOffset(0x04)] public float inStrength;
        [FieldOffset(0x08)] public float outElev;
        [FieldOffset(0x0C)] public float inElev;
        [FieldOffset(0x10)] public float speedMin;
        [FieldOffset(0x14)] public float speedMax;
        [FieldOffset(0x18)] public float speedMinLength;
        [FieldOffset(0x1C)] public float speedMaxLength;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct FlyerNearParam
    {
        [FieldOffset(0x00)] public float duration;
        [FieldOffset(0x04)] public float startHABounceUp;
        [FieldOffset(0x08)] public float startHABounceBack;
        [FieldOffset(0x0C)] public float preliminaryMotionSpeed;
        [FieldOffset(0x10)] public float resetByDistance;
        [FieldOffset(0x20)] public FlyerNearStartCamParam startCam;
        [FieldOffset(0x50)] public FlyerIdlingNearParam idling;
        [FieldOffset(0x60)] public FlyerGuardParam guard;
        [FieldOffset(0x64)] public FlyerAutoLockonParam lockon;
        [FieldOffset(0x80)] public FlyerNearEndLaunchParam launch;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x230)]
    public struct MiniBossFlyerCommonParam
    {
        [FieldOffset(0x00)] public MiniBossCommonConfig commonConfig;
        [FieldOffset(0x40)] public FlyerTrailParam trail;
        [FieldOffset(0x58)] public FlyerWanderParam wander;
        [FieldOffset(0x5C)] public FlyerWatchParam watch;
        [FieldOffset(0x80)] public FlyerEscapeParam escape;
        [FieldOffset(0x180)] public FlyerNearParam nearRange;
        [FieldOffset(0x220)] public float stunTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x34)]
    public struct MiniBossLevelCommonConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x10)] public float stunDecreaseStartTime;
        [FieldOffset(0x14)] public float stunDecreaseSpeed;
        [FieldOffset(0x18)] public unsafe fixed float maxStaggerPoint[3];
        [FieldOffset(0x24)] public float staggerDecreaseStartTime;
        [FieldOffset(0x28)] public float staggerDecreaseSpeed;
        [FieldOffset(0x2C)] public float attackRate;
        [FieldOffset(0x30)] public ushort expItemNum;
        [FieldOffset(0x32)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x38)]
    public struct MiniBossFlyerLevelParam
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public MiniBossLevelCommonConfig commonConfig;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct FlayerEscapeShotSequenceTable
    {
        [FieldOffset(0x00)] public int id;
        [FieldOffset(0x04)] public float interval;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x44)]
    public struct FlayerEscapeShotSequenceTableData
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x04)] public unsafe fixed byte /* FlayerEscapeShotSequenceTable[8] */ _table[64];

        public unsafe FlayerEscapeShotSequenceTable* table
        {
            get
            {
                fixed (byte* p_table = _table)
                    return (FlayerEscapeShotSequenceTable*)p_table;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x444)]
    public struct MiniBossFlyerLevelBand
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public unsafe fixed byte /* FlayerEscapeShotSequenceTableData[16] */ _sequence[1088];

        public unsafe FlayerEscapeShotSequenceTableData* sequence
        {
            get
            {
                fixed (byte* p_sequence = _sequence)
                    return (FlayerEscapeShotSequenceTableData*)p_sequence;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18A0)]
    public struct MiniBossFlyerConfig
    {
        [FieldOffset(0x00)] public MiniBossFlyerCommonParam commonParam;
        [FieldOffset(0x230)] public unsafe fixed byte /* MiniBossFlyerLevelParam[5] */ _levelParams[280];

        public unsafe MiniBossFlyerLevelParam* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (MiniBossFlyerLevelParam*)p_levelParams;
            }
        }

        [FieldOffset(0x348)] public unsafe fixed byte /* MiniBossFlyerLevelBand[5] */ _levelBand[5460];

        public unsafe MiniBossFlyerLevelBand* levelBand
        {
            get
            {
                fixed (byte* p_levelBand = _levelBand)
                    return (MiniBossFlyerLevelBand*)p_levelBand;
            }
        }
    }

}